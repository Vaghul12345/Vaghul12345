module regfile_tb();

reg write, clk, err;

// wire <--> output
// reg <--> input
reg [2:0] writenum, readnum;
reg [15:0] data_in;
wire [15:0] data_out;
regfile DUT(data_in,writenum,write,readnum,clk,data_out);

initial begin
//error is 0
err = 1'b0;
clk = 1'b0;




//Input 5 into register R0
data_in = 16'b00000000000000110;
writenum = 3'b000;
clk = 1'b1;
write = 1'b1;
#5;
readnum = 3'b000;

//If output is wrong, then err is 1
if (data_out != 16'b00000000000000110)
err = 1'b1;

//Input 49 into register R4
data_in = 16'b0000000000110001;
writenum = 3'b100;
clk = 1'b1;
write = 1'b1;
#5;
readnum = 3'b100;

//If output is wrong, then err is 1
if (data_out != 16'b0000000000110001)
err = 1'b1;

//Check if register still holds 5 in register 0
readnum = 3'b000;
//If output is wrong, then err is 1
if (data_out != 16'b00000000000000110)
err = 1'b1;

//Write is equal to 0, check if 5 is still in register
data_in = 16'b1110001010101010;
writenum = 3'b000;
clk = 1'b1;
write = 1'b0;
#5;
readnum = 3'b00;
//If output is wrong, then err is 1
if (data_out != 16'b0000000000110001)
err = 1'b1;


//Overwrite R0 and input something else
data_in = 16'b1110001010101010;
writenum = 3'b000;
clk = 1'b1;
write = 1'b1;
#5;
readnum = 3'b00;
//If output is wrong, then err is 1
if (data_out != 16'b1110001010101010)
err = 1'b1;

end
endmodule
